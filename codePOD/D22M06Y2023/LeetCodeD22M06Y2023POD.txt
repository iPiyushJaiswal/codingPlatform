Daily LeetCoding Challenge June, Day 22, 2023

714. Best Time to Buy and Sell Stock with Transaction Fee

You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
Example 2:

Input: prices = [1,3,7,5,10,3], fee = 3
Output: 6
 

Constraints:

1 <= prices.length <= 5 * 104
1 <= prices[i] < 5 * 104
0 <= fee < 5 * 104


---------------------------------------------------------------------------------------------------
Solution:
***********Approach*************

****Space optimization: ****

1. Initialize variables:
   - n = size of prices
   - dp = [0, 0] (vector of two elements)
   - temp = [0, 0] (vector of two elements)

2. Iterate through the prices in reverse order, from index n-1 to 0:
   a. For each iteration, do the following:
      - Iterate over two possible states: buy (1) or not buy (0)
        - For each state, do the following:
          - If the state is "buy" (1):
            - Calculate the maximum profit by choosing between buying the stock at the current price and the maximum profit
              from the previous state (not buying):
              temp[1] = max(-prices[i] + dp[0], dp[1])
          - Otherwise, if the state is "not buy" (0):
            - Calculate the maximum profit by choosing between not buying the stock (no change in profit) and
              selling the stock at the current price minus the transaction fee, plus the maximum profit from the previous state (buy):
              temp[0] = max(prices[i] - fee + dp[1], dp[0])

      - Assign the values of temp to dp for the next iteration: dp = temp

3. Return the maximum profit, which is stored in dp[1]



-------------------------------------------------------------------------------
**# Complexity

- Time complexity:

1. recursive index,buy t.c=exponential
2. memoization t.c=O(n*2)
3. tabulation t.c=O(n*2)
4. Space optimization t.c=O(n*2)**

------------------------------------------------------------------------------
- Space complexity:

1. recursive  s.c=O(n)
2. memoization  s.c=O(n*2) + O(n) stack space
3. tabulation s.c=O(n*2)
4. Space optimization  s.c=O(2*2)


*******************Code****************** IN C++......................

class Solution {
public:
int rec(vector<int>& prices, int fee,int n,int i,int buy)
{
    if(i==n)
    return 0;
    if(buy==1)
    {
        return max(-prices[i]+rec(prices,fee,n,i+1,0),
        rec(prices,fee,n,i+1,1));
    }
    else
    {
        return max(prices[i]-fee+rec(prices,fee,n,i+1,1),
        rec(prices,fee,n,i+1,0));
    }
}
int rec1(vector<int>& prices, int fee,int n,int i,int buy,vector<vector<int>>&dp)
{
    if(i==n)
    return 0;
    if(dp[i][buy]!=-1)
    return dp[i][buy];
    if(buy==1)
    {
        return dp[i][1]=max(-prices[i]+rec1(prices,fee,n,i+1,0,dp),
        rec1(prices,fee,n,i+1,1,dp));
    }
    else
    {
        return dp[i][0]=max(prices[i]-fee+rec1(prices,fee,n,i+1,1,dp),
        rec1(prices,fee,n,i+1,0,dp));
    }
}
    int maxProfit(vector<int>& prices, int fee) {
        int n=prices.size();
        // recursive index,buy t.c=exponential s.c=O(n)
        // return rec(prices,fee,n,0,1);
        // memoization t.c=O(n*2), s.c=O(n*2) + O(n) stack space
        // vector<vector<int>>dp(n,vector<int>(2,-1));
        // return rec1(prices,fee,n,0,1,dp);
        // tabulation t.c=O(n*2), s.c=O(n*2)
    //     vector<vector<int>>dp(n+1,vector<int>(2,0));
    //     for(int i=n-1;i>=0;i--)
    //     {
    //         for(int buy=0;buy<=1;buy++)
    //         {
    //             if(buy==1)
    //             {
    //                 dp[i][1]=max(-prices[i]+dp[i+1][0],dp[i+1][1]);
    //             }
    //             else
    //             {
    //                 dp[i][0]=max(prices[i]-fee+dp[i+1][1],dp[i+1][0]);
    //             }
    //         }
    //     }
    //     return dp[0][1];
    // }
    // Space optimization t.c=O(n*2), s.c=O(2*2)
        vector<int>dp(2,0);
        vector<int>temp(2,0);
        for(int i=n-1;i>=0;i--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                if(buy==1)
                {
                    temp[1]=max(-prices[i]+dp[0],dp[1]);
                }
                else
                {
                    temp[0]=max(prices[i]-fee+dp[1],dp[0]);
                }
            }
            dp=temp;
        }
        return dp[1];
    }
};