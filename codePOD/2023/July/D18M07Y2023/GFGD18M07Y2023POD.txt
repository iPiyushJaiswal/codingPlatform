Problem GFG (Medium)
Longest Repeating Subsequence

Question link: https://practice.geeksforgeeks.org/problems/longest-repeating-subsequence2004/1

Code: In C++:
Complexity: 

T.C= (n*n) 
S.C=O(n) space optimize. DP

----------------
CODE IN C++ 
---------------- 
------------------------------------------------------------------------------------------------
class Solution {
	public:
	int rec(string str,int i,int j,int n)
	{
	    if(i==n || j==n)
	    return 0;
	    if(str[i]==str[j] && i!=j)
	    return 1 + rec(str,i+1,j+1,n);
	    return max(rec(str,i+1,j,n),rec(str,i,j+1,n));
	}
	int rec1(string str,int i,int j,int n,vector<vector<int>>&dp)
	{
	    if(i==n || j==n)
	    return 0;
	    if(dp[i][j]!=-1)
	    return dp[i][j];
	    if(str[i]==str[j] && i!=j)
	    return dp[i][j]=1 + rec1(str,i+1,j+1,n,dp);
	    return dp[i][j]=max(rec1(str,i+1,j,n,dp),rec1(str,i,j+1,n,dp));
	}
		int LongestRepeatingSubsequence(string str){
		    // Code here
		    int n=str.size();
		  //  return rec(str,0,0,n);
		    
		  //  memoization
		  //vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
		  //return rec1(str,0,0,n,dp);
		  
		  //tabulation:
		  //vector<vector<int>>dp(n+1,vector<int>(n+1,0));
		  //for(int i=n-1;i>=0;i--)
		  //{
		  //    for(int j=n-1;j>=0;j--)
		  //    {
    //         	    if(str[i]==str[j] && i!=j)
    //         	    dp[i][j]=1 + dp[i+1][j+1];
    //         	    else
    //         	    dp[i][j]=max(dp[i+1][j],dp[i][j+1]);
		  //    }
		  //}
		  //return dp[0][0];
		  
		  //space optimization:
		  vector<int>dp(n+1,0);
		  for(int i=n-1;i>=0;i--)
		  {
		      vector<int>temp(n+1,0);
		      for(int j=n-1;j>=0;j--)
		      {
            	    if(str[i]==str[j] && i!=j)
            	    temp[j]=1 + dp[j+1];
            	    else
            	    temp[j]=max(dp[j],temp[j+1]);
		      }
		      dp=temp;
		  }
		  return dp[0];
	}
};