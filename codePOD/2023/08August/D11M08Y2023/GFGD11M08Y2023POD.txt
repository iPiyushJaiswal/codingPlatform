Problem GFG (Medium)

Coin Change


Question link: https://practice.geeksforgeeks.org/problems/coin-change2448/1


Complexity: 

Method 1: recurssion

T.C=O(Exponential)
S.C=O(sum)
-----------------------
Method 2: Memoization

T.C=O(N*Sum)
S.C=O(N*Sum) + O(sum) recursive stack
-----------------------
Method 3: Tabulation

T.C=O(N*Sum)
S.C=O(N*Sum)
-----------------------
Method 4: Space Optimized

T.C=O(N*Sum)
S.C=O(2*Sum)
----------------
CODE IN C++ 
---------------- 
------------------------------------------------------------------------------------------------
class Solution {
  public:
  long long int rec(int coins[], int i, int sum)
  {
      if(i==0)
      {
          if(sum%coins[i]==0)
          return 1;
          return 0;
      }
      long long int notTake=rec(coins,i-1,sum);
      long long int take=0;
      if(sum>=coins[i])
      take=rec(coins,i,sum-coins[i]);
      return take+notTake;
  }
  long long int rec1(int coins[], int i, int sum,
  vector<vector<long long int>>&dp)
  {
      if(i==0)
      {
          if(sum%coins[i]==0)
          return dp[i][sum]= 1;
          return dp[i][sum]= 0;
      }
      if(dp[i][sum]!=-1)
      return dp[i][sum];
      long long int notTake=rec1(coins,i-1,sum,dp);
      long long int take=0;
      if(sum>=coins[i])
      take=rec1(coins,i,sum-coins[i],dp);
      return dp[i][sum]=take+notTake;
  }
    long long int count(int coins[], int N, int sum) {
        // code here.
        // return rec(coins,N-1,sum);
        
        // memoization
        // vector<vector<long long int>>dp(N,vector<long long int>(sum+1,-1));
        // return rec1(coins,N-1,sum,dp);
        
        // tabulation 
        // vector<vector<long long int>>dp(N,vector<long long int>(sum+1,0));
        // for(int j=0;j<=sum;j++)
        // {
        //     if(j%coins[0]==0)
        //     dp[0][j]=1;
        // }
        // for(int i=1;i<N;i++)
        // {
        //     for(int j=0;j<=sum;j++)
        //     {
        //         long long int notTake=dp[i-1][j];
        //         long long int take=0;
        //         if(j>=coins[i])
        //         take=dp[i][j-coins[i]];
        //         dp[i][j]=take+notTake;
        //     }
        // }
        // return dp[N-1][sum];
        
        // space optimization
        vector<long long int>dp(sum+1,0);
        vector<long long int>temp(sum+1,0);
        for(int j=0;j<=sum;j++)
        {
            if(j%coins[0]==0)
            dp[j]=1;
        }
        for(int i=1;i<N;i++)
        {
            for(int j=0;j<=sum;j++)
            {
                long long int notTake=dp[j];
                long long int take=0;
                if(j>=coins[i])
                take=temp[j-coins[i]];
                temp[j]=take+notTake;
            }
            dp=temp;
        }
        return dp[sum];
    }
};