Problem Type: (Medium)

33. Search in Rotated Sorted Array


Link: https://leetcode.com/problems/search-in-rotated-sorted-array/description/

---------------------------------------------------------------------------------------------------
Solution:
-------------------------------------

# Approach

C++ Binary Search
---------------------------------------

# Complexity

- Time complexity:
Method : Binary Search 

T.C=O(log(n))

-Space complexity:

S.C= O(1)

*******************Code****************** IN C++......................

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int low=0;
        int high=n-1;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if(nums[mid]==target)
            return mid;
            if(nums[low]<=nums[mid])
            {
                if(nums[low]<=target && nums[mid]>=target)
                high=mid-1;
                else
                low=mid+1;
            }
            else
            {
                if(nums[mid]<=target && target<=nums[high])
                low=mid+1;
                else
                high=mid-1;
            }
        }
        return -1;
    }
};