Problem GFG (Easy)

Nth Fibonacci Number


Question link: https://practice.geeksforgeeks.org/problems/longest-increasing-subsequence-1587115620/1


Complexity: 

Method1:
Recursion =>rec method

Time Complexity=exponential

Space Complexity=O(n). recursive stack

 

Method2:
Memoization=>rec1 method

Time Complexity=O(n)

Space Complexity =O(n).dp vector + O(n). recursive stack.

 

Method3:
Tabulation=>

Time Complexity=O(n)

Space Complexity =O(n).dp vector.

 

Method4:
Space Optimization=>

Time Complexity=O(n)

Space Complexity =O(2). constant space.

----------------
CODE IN C++ 
---------------- 
------------------------------------------------------------------------------------------------
class Solution {
  public:
  int mod=1000000007;
  int rec(int n)
  {
      if(n==1 || n==2)
      return 1;
      return (rec(n-1)+rec(n-2))%mod;
  }
  int rec1(int n,vector<int>&dp)
  {
      if(n==1 || n==2)
      return dp[n]=1;
      if(dp[n]!=-1)
      return dp[n];
      return dp[n]=(rec1(n-1,dp)+rec1(n-2,dp))%mod;
  }
    int nthFibonacci(int n){
        // code here
        // recursion
        // return rec(n);
        
        // memoization
        // vector<int>dp(n+1,-1);
        // return rec1(n,dp);
        
        // tabulation
        // vector<int>dp(n+2,0);
        // dp[1]=dp[2]=1;
        // for(int i=3;i<=n;i++)
        //     dp[i]=(dp[i-1]+dp[i-2])%mod;
        // return dp[n];
        
        // space optimization
        int dp1=1,dp2=1;
        for(int i=3;i<=n;i++)
           {
               int temp=(dp1+dp2)%mod;
               dp2=dp1;
               dp1=temp;
           }
        return dp1;
    }
};