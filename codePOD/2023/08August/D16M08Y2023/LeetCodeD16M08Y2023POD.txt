Problem Type: (Hard)

239. Sliding Window Maximum


Link: https://leetcode.com/problems/sliding-window-maximum/

---------------------------------------------------------------------------------------------------
Solution:
-------------------------------------

# Approach

C++ Doubly linked List (Dequeue)
---------------------------------------

# Complexity

Method 1: 

T.C= O(n) 

S.C= O(k)


*******************Code****************** IN C++......................

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n=nums.size();
        deque<int>dq;
        vector<int>ans;
        for(int i=0;i<n;i++)
        {
            while(!dq.empty() && dq.front()<=i-k)
            dq.pop_front();
            while(!dq.empty() && nums[dq.back()]<=nums[i])
            dq.pop_back();
            dq.push_back(i);
            if(i>=k-1)
            ans.push_back(nums[dq.front()]);
        }
        return ans;
    }
};