Problem GFG (Medium)

Shortest path in Directed Acyclic Graph


Question link: https://practice.geeksforgeeks.org/problems/shortest-path-in-undirected-graph/1

Code: In C++:
Complexity: 

T.C=O(n) in worsst case all 1.
S.C=O(n) visited vector + stack  + recursive stack.

----------------
CODE IN C++ 
---------------- 
------------------------------------------------------------------------------------------------

class Solution {
  public:
  void topo(int i,vector<pair<int,int>>adj[],stack<int>&st,
  vector<int>&vis)
  {
      vis[i]=1;
      st.push(i);
      for(auto it:adj[i])
      {
          if(vis[it.first]==-1)
          topo(it.first,adj,st,vis);
      }
      st.push(i);
  }
     vector<int> shortestPath(int n,int m, 
     vector<vector<int>>& edges){
        // code here
        vector<pair<int,int>>adj[n];
    for(int i=0;i<m;i++)
        adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});
    stack<int>st;
    vector<int>vis(n,-1);
    for(int i=0;i<n;i++)
    {
        if(vis[i]==-1)
        topo(i,adj,st,vis);
    }
    vector<int>ans(n,1e9);
    ans[0]=0;
    while(!st.empty())
    {
        int node=st.top();
        st.pop();
        for(auto it:adj[node])
        {
            if( ans[it.first]>it.second + ans[node])
            ans[it.first]=it.second+ans[node];
        }
    }
    for(int i=0;i<n;i++)
    {
        if(ans[i]==1e9)
        ans[i]=-1;
    }
    return ans;
    }
};