Problem Type: (Medium)

77. Combinations


Link: https://leetcode.com/problems/combinations/description/


---------------------------------------------------------------------------------------------------

Solution:
-------------------------------------

# Approach

Recursion take not take
--------------

# Complexity
- Time complexity:

Recursion + backtracing
T.C=O(2^n)

-------------

- Space complexity:

Recursion + backtracing
S.C=O(n)recursive stack size + backtracking vector.



--------------------------------------

*******************Code****************** IN C++......................

class Solution {
public:
void rec(int i,int n,int k,vector<vector<int>>&ans,vector<int>&temp)
{
    if(temp.size()==k)
    {
        ans.push_back(temp);
        return;
    }
    if(i>n)
    return ;
    temp.push_back(i);
    rec(i+1,n,k,ans,temp);
    temp.pop_back();
    rec(i+1,n,k,ans,temp);
}
    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>>ans;
        vector<int>temp;
        rec(1,n,k,ans,temp);
        return ans;
    }
};