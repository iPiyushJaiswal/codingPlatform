Problem GFG (Medium)

Longest Increasing Subsequence


Question link: https://practice.geeksforgeeks.org/problems/longest-increasing-subsequence-1587115620/1


Complexity: 

IN CODE Commented.
----------------
CODE IN C++ 
---------------- 
------------------------------------------------------------------------------------------------
class Solution
{
    public:
    //Function to find length of longest increasing subsequence.
    int rec(int i,int n,int a[],int prevInd)
    {
        if(i==n)
        return 0;
        int notPick=rec(i+1,n,a,prevInd);
        int pick=0;
        if(prevInd==-1 || a[i]>a[prevInd])
        pick=1+rec(i+1,n,a,i);
        return max(pick,notPick);
    }
    
    int rec1(int i,int n,int a[],int prevInd,
    vector<vector<int>>&dp)
    {
        if(i==n)
        return 0;
        if(dp[i][prevInd+1]!=-1)
        return dp[i][prevInd+1];
        int notPick=rec1(i+1,n,a,prevInd,dp);
        int pick=0;
        if(prevInd==-1 || a[i]>a[prevInd])
        pick=1+rec1(i+1,n,a,i,dp);
        return dp[i][prevInd+1]=max(pick,notPick);
    }
    
    int binarySearch(int low,int high,vector<int>arr,int val)
    {
        int mid;
        while(low<high)
        {
            int mid=low + (high-low)/2;
            if(arr[mid]<val)
            low=mid+1;
            else if(arr[mid]>val)
            high=mid;
            else
            return mid;
        }
        return high;
    }
    int longestSubsequence(int n, int a[])
    {
       // your code here
    //   rec t.c=O(2^n) s.c=O(n)
    //   return rec(0,n,a,-1);
    
    // memoization t.c=O(n*n) s.c=O(n*n) + O(n)
    // prevInd from -1 to n-1 do right shift by 1
    // vector<vector<int>>dp(n,vector<int>(n+1,-1));
    // return rec1(0,n,a,-1,dp);
    
    // tabulation t.c=O(n*n) s.c=O(n*n)
//   vector<vector<int>>dp(n+1,vector<int>(n+1,0));
//   for(int i=n-1;i>=0;i--)
//   {
//       for(int prevInd=i-1;prevInd>=-1;prevInd--)
//       {
//             int notPick=dp[i+1][prevInd+1];
//             int pick=0;
//             if(prevInd==-1 || a[i]>a[prevInd])
//             pick=1+dp[i+1][i+1];
//             dp[i][prevInd+1]=max(pick,notPick);
//       }
//   }
//   return dp[0][0];
   
//   space optimization t.c=O(n*n) s.c=O(2n)
//     vector<int>dp(n+1,0);
//     vector<int>temp(n+1,0);
//   for(int i=n-1;i>=0;i--)
//   {
//       for(int prevInd=i-1;prevInd>=-1;prevInd--)
//       {
//             int notPick=dp[prevInd+1];
//             int pick=0;
//             if(prevInd==-1 || a[i]>a[prevInd])
//             pick=1+dp[i+1];
//             temp[prevInd+1]=max(pick,notPick);
//       }
//       dp=temp;
//   }
//   return dp[0];

// method 2
        // vector<int>dp(n+1,1);
        // for(int i=1;i<n;i++)
        // {
        //     for(int j=0;j<i;j++)
        //     {
        //         if(a[i]>a[j])
        //         dp[i]=max(dp[i],dp[j]+1); 
        //     }
        // }
        // int ans=0;
        // for(int i=0;i<n;i++)
        // ans=max(ans,dp[i]);
        // return ans;
        
        // method 3: this method will give only size 
        // lis is not possible with this method
        // t.c=O(nlogn) s.c=O(n)
        vector<int>arr;
        arr.push_back(a[0]);
        for(int i=1;i<n;i++)
        {
            if(a[i]>arr.back())
            arr.push_back(a[i]);
            else
            {
                int ind=binarySearch(0,arr.size(),arr,a[i]);
                arr[ind]=a[i];
            }
        }
        return arr.size();
    }
};