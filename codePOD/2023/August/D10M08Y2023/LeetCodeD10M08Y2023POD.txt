Problem Type: (Medium)

81. Search in Rotated Sorted Array II


Link: https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/

---------------------------------------------------------------------------------------------------
Solution:
-------------------------------------

# Approach

C++ Binary Search
---------------------------------------

# Complexity

- Time complexity:
Method : Binary Search 

T.C=O(n) in worst case all elements of array is equal then o(n)
because in each iteration low and high changed.

**But In **

Avrage case T.C=O(logN).

-Space complexity:

S.C= O(1)

*******************Code****************** IN C++......................

class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int low=0;
        int high=nums.size()-1;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if(nums[mid]==target)
            return true;
            else if(nums[low]==nums[mid] && nums[mid]==nums[high])
            {
                low++;
                high--;
            }
            else if(nums[low]<=nums[mid])
            {
                if(nums[low]<=target && target<nums[mid])
                high=mid-1;
                else
                low=mid+1;
            }
            else
            {
                if(nums[mid]<target && target<=nums[high])
                low=mid+1;
                else
                high=mid-1;
            }
        }
        return false;
    }
};